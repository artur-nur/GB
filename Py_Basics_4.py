# Task1
# Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

script_name, hours, rate, bonus = argv


def calc_salary(hours, rate, bonus):
    return print(f"Employee's salary is {int(hours) * int(rate) + int(bonus)}")


calc_salary(hours, rate, bonus)


# Task2
# Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].


def list_nums_bigger_than_prevous(nums):
    return [nums[i + 1] for i in range(len(nums)-1) if nums[i + 1] > nums[i]]


num_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
print(list_nums_bigger_than_prevous(num_list))


# Task3
# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.


def find_nums_in_range():
    return [i for i in range(20, 241) if i%20 == 0 or i%21 == 0]


print(find_nums_in_range())


# Task4
# Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]


def remove_dublicates(nums):
    return [i for i in nums if nums.count(i) == 1]


num_list1 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print(remove_dublicates(num_list1))


# Task5
# Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce


print(reduce(lambda x, y: x * y, [i for i in range(100, 1001) if i%2 == 0]))


# Task6
# Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.


from itertools import count, cycle


n = int(input("Please enter a number to start from: "))
limit = int(input("Please enter a number to stop on: "))
for i in count(n):
    if i == limit:
        break
    else:
        print(i)

c = 0
num_list2 = [1, 2, 3, 4, 5]
for i in cycle(num_list2):
    if c == limit:
        break
    else:
        print(i)
    c += 1


# Task7
# Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.


def fact(n):
    fact = 1
    for el in range(1, n+1):
        fact = el * fact
        yield fact


n = int(input("How many factorials you'd like to get? "))

for i in fact(n):
    print(i)

